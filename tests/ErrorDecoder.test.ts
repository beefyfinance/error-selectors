import { describe, expect, test } from 'bun:test';
import { ErrorDecoder } from '../src/ErrorDecoder.js';
import type { AbiError, AbiType } from 'abitype';

const emptyCases = {
  'empty string': {
    data: '',
    results: [
      {
        type: 'empty',
        data: '0x'
      } as const
    ],
  },
  '0x': {
    data: '0x',
    results: [
      {
        type: 'empty',
        data: '0x'
      } as const
    ],
  },
  'empty byte array': {
    data: new Uint8Array([]),
    results: [
      {
        type: 'empty',
        data: '0x'
      } as const
    ],
  },
  'all zero bytes': {
    data: '0x00000000',
    results: [
      {
        type: 'unmatched',
        selector: '0x00000000',
        data: '0x00000000'
      } as const
    ]
  },
  'not long enough for selector / too short for text': {
    data: '0x1234',
    results: [
      {
        type: 'unparsed',
        data: '0x1234'
      } as const
    ]
  },
};

const builtInCases = {
  'require(condition, message) / revert(message)': {
    data: '0x08c379a00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002642455032303a207472616e7366657220616d6f756e7420657863656564732062616c616e63650000000000000000000000000000000000000000000000000000',
    results: [
      {
        type: 'decoded',
        selector: '0x08c379a0',
        signature: 'Error(string)',
        abi: makeAbi('Error', 'string'),
        data: '0x08c379a00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002642455032303a207472616e7366657220616d6f756e7420657863656564732062616c616e63650000000000000000000000000000000000000000000000000000',
        params: [ 'BEP20: transfer amount exceeds balance' ]
      } as const
    ]
  },
  // @see https://github.com/ethereum/solidity/blob/71988f7546063a9d6d63d54ece85839400b46264/libsolutil/ErrorCodes.h#L25
  'panic - arithmetic underflow or overflow': {
    data: '0x4e487b710000000000000000000000000000000000000000000000000000000000000011',
    results: [
      {
        type: 'decoded',
        selector: '0x4e487b71',
        signature: 'Panic(uint256)',
        abi: makeAbi('Panic', 'uint256'),
        data: '0x4e487b710000000000000000000000000000000000000000000000000000000000000011',
        params: [ 17n ]
      } as const
    ]
  }
};

const noParametersCases = {
  'ErrorNotEnoughBalance() - hex': {
    data: '0x00b284f2',
    results: [
      {
        type: 'decoded',
        selector: '0x00b284f2',
        signature: 'ErrorNotEnoughBalance()',
        abi: makeAbi('ErrorNotEnoughBalance'),
        data: '0x00b284f2'
      } as const
    ]
  },
  'FailedInnerCall() - hex': {
    data: '0x1425ea42',
    results: [
      {
        type: 'decoded',
        selector: '0x1425ea42',
        signature: 'FailedInnerCall()',
        abi: makeAbi('FailedInnerCall'),
        data: '0x1425ea42'
      } as const
    ]
  },
  'NotCalm() - byte array': {
    data: new Uint8Array([ 0x26, 0xc8, 0x78, 0x76 ]),
    results: [
      {
        type: 'decoded',
        selector: '0x26c87876',
        signature: 'NotCalm()',
        abi: makeAbi('NotCalm'),
        data: '0x26c87876'
      } as const
    ]
  }
};

const oneParameterCases = {
  'WrongPercentage(uint256)': {
    data: '0x0a0522e1000000000000000000000000000000000000000000000015a8bce1b91eba5e72',
    results: [
      {
        type: 'decoded',
        selector: '0x0a0522e1',
        signature: 'WrongPercentage(uint256)',
        abi: makeAbi('WrongPercentage', 'uint256'),
        data: '0x0a0522e1000000000000000000000000000000000000000000000015a8bce1b91eba5e72',
        params: [
          399540466827094810226n
        ]
      } as const
    ]
  },
  'CallerNotSelf(address)': {
    data: '0x0f00664c0000000000000000000000004200000000000000000000000000000000000006',
    results: [
      {
        type: 'decoded',
        selector: '0x0f00664c',
        signature: 'CallerNotSelf(address)',
        abi: makeAbi('CallerNotSelf', 'address'),
        data: '0x0f00664c0000000000000000000000004200000000000000000000000000000000000006',
        params: [
          '0x4200000000000000000000000000000000000006',
        ],
      } as const
    ]
  },
  'ErrorNotInDatabase(address)': {
    data: '0x48e5d7c90000000000000000000000004200000000000000000000000000000000000006',
    results: [
      {
        type: 'unmatched',
        selector: '0x48e5d7c9',
        data: '0x48e5d7c90000000000000000000000004200000000000000000000000000000000000006',
      } as const
    ]
  },
};

const twoParameterCases = {
  'SwapFailed(address,bytes)': {
    data: '0x6f40b568000000000000000000000000ba12222222228d8ba445958a75a0704d566bf2c800000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000644945bcec90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000004c0000000000000000000000000cee843cd04e3758ddc5bcff08647dddb117151d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cee843cd04e3758ddc5bcff08647dddb117151d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000580ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002c064541216bafffeec8ea535bb71fbc927831d059500010000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000107583700000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000423a1323c871abc9d89eb06855bf5347048fc4a500000000000000000000049600000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000ca8ecd05a289b1fbc2e0eaec07360c4bfec07b6100020000000000000000051d00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000006e822c64c00393b2078f2a5bb75c575ab505b55c00020000000000000000054800000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000082af49447d8a07e3bd95bd0d56f35241523fbab1000000000000000000000000ff970a61a04b1ca14834a43f5de4533ebddb5cc8000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e58310000000000000000000000007cfadfd5645b50be87d546f42699d863648251ad000000000000000000000000ca5d8f8a8d49439357d3cf46ca2e720702f132b800000000000000000000000000000000000000000000000000000000000000057fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fffffffffffffffffffffffffffffffffffffffffffffffffffffff31de2db2400000000000000000000000000000000000000000000000000000000',
    results: [
      {
        type: 'decoded',
        selector: '0x6f40b568',
        signature: 'SwapFailed(address,bytes)',
        abi: makeAbi('SwapFailed', 'address', 'bytes'),
        data: '0x6f40b568000000000000000000000000ba12222222228d8ba445958a75a0704d566bf2c800000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000644945bcec90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000004c0000000000000000000000000cee843cd04e3758ddc5bcff08647dddb117151d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cee843cd04e3758ddc5bcff08647dddb117151d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000580ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002c064541216bafffeec8ea535bb71fbc927831d059500010000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000107583700000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000423a1323c871abc9d89eb06855bf5347048fc4a500000000000000000000049600000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000ca8ecd05a289b1fbc2e0eaec07360c4bfec07b6100020000000000000000051d00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000006e822c64c00393b2078f2a5bb75c575ab505b55c00020000000000000000054800000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000082af49447d8a07e3bd95bd0d56f35241523fbab1000000000000000000000000ff970a61a04b1ca14834a43f5de4533ebddb5cc8000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e58310000000000000000000000007cfadfd5645b50be87d546f42699d863648251ad000000000000000000000000ca5d8f8a8d49439357d3cf46ca2e720702f132b800000000000000000000000000000000000000000000000000000000000000057fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fffffffffffffffffffffffffffffffffffffffffffffffffffffff31de2db2400000000000000000000000000000000000000000000000000000000',
        params: [
          '0xBA12222222228d8Ba445958a75a0704d566BF2C8',
          '0x945bcec90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000004c0000000000000000000000000cee843cd04e3758ddc5bcff08647dddb117151d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cee843cd04e3758ddc5bcff08647dddb117151d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000580ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002c064541216bafffeec8ea535bb71fbc927831d059500010000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000107583700000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000423a1323c871abc9d89eb06855bf5347048fc4a500000000000000000000049600000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000ca8ecd05a289b1fbc2e0eaec07360c4bfec07b6100020000000000000000051d00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000006e822c64c00393b2078f2a5bb75c575ab505b55c00020000000000000000054800000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000082af49447d8a07e3bd95bd0d56f35241523fbab1000000000000000000000000ff970a61a04b1ca14834a43f5de4533ebddb5cc8000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e58310000000000000000000000007cfadfd5645b50be87d546f42699d863648251ad000000000000000000000000ca5d8f8a8d49439357d3cf46ca2e720702f132b800000000000000000000000000000000000000000000000000000000000000057fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fffffffffffffffffffffffffffffffffffffffffffffffffffffff31de2db24'
        ]
      } as const
    ]
  },
  'NoSwapData(address,address)': {
    data: '0xcc35f1520000000000000000000000004200000000000000000000000000000000000006000000000000000000000000532f27101965dd16442e59d40670faf5ebb142e4',
    results: [
      {
        type: 'decoded',
        selector: '0xcc35f152',
        signature: 'NoSwapData(address,address)',
        abi: makeAbi('NoSwapData', 'address', 'address'),
        data: '0xcc35f1520000000000000000000000004200000000000000000000000000000000000006000000000000000000000000532f27101965dd16442e59d40670faf5ebb142e4',
        params: [
          '0x4200000000000000000000000000000000000006',
          '0x532f27101965dd16442E59d40670FaF5eBB142E4'
        ],
      } as const
    ]
  },
};

const threeParameterCases = {
  'ERC20InsufficientBalance(address,uint256,uint256)': {
    data: '0xe450d38c000000000000000000000000d1e13d528123eafe5ae8703c64ef243331040d9d000000000000000000000000000000000000000000000015a8bce1b91eba5e7200000000000000000000000000000000000000000000005f2bb5bf5025c5e226',
    results: [
      {
        type: 'decoded',
        selector: '0xe450d38c',
        signature: 'ERC20InsufficientBalance(address,uint256,uint256)',
        abi: makeAbi('ERC20InsufficientBalance', 'address', 'uint256', 'uint256'),
        data: '0xe450d38c000000000000000000000000d1e13d528123eafe5ae8703c64ef243331040d9d000000000000000000000000000000000000000000000015a8bce1b91eba5e7200000000000000000000000000000000000000000000005f2bb5bf5025c5e226',
        params: [
          '0xD1E13d528123EAfE5aE8703c64EF243331040D9D',
          399540466827094810226n,
          1755590320867774947878n
        ],
      } as const
    ]
  },
  'InsufficientBalance(address,uint256,uint256)': {
    data: '0xdb42144d000000000000000000000000d1e13d528123eafe5ae8703c64ef243331040d9d000000000000000000000000000000000000000000000015a8bce1b91eba5e7200000000000000000000000000000000000000000000005f2bb5bf5025c5e226',
    results: [
      {
        type: 'decoded',
        selector: '0xdb42144d',
        signature: 'InsufficientBalance(address,uint256,uint256)',
        abi: makeAbi('InsufficientBalance', 'address', 'uint256', 'uint256'),
        data: '0xdb42144d000000000000000000000000d1e13d528123eafe5ae8703c64ef243331040d9d000000000000000000000000000000000000000000000015a8bce1b91eba5e7200000000000000000000000000000000000000000000005f2bb5bf5025c5e226',
        params: [
          '0xD1E13d528123EAfE5aE8703c64EF243331040D9D',
          399540466827094810226n,
          1755590320867774947878n
        ],
      } as const
    ]
  },
};

const textCases = {
  'Cosmos SDK Bank Keeper': {
    data: '0x306962632f4341364642464146333939343734413036323633453130443043453541454242453135313839443644344232444439414445363130303745363845423944423020697320736d616c6c6572207468616e203130343339346962632f434136464246414633393934373441303632363345313044304345354145424245313531383944364434423244443941444536313030374536384542394442303a20696e73756666696369656e742066756e6473',
    results: [
      {
        type: 'text',
        data: '0x306962632f4341364642464146333939343734413036323633453130443043453541454242453135313839443644344232444439414445363130303745363845423944423020697320736d616c6c6572207468616e203130343339346962632f434136464246414633393934373441303632363345313044304345354145424245313531383944364434423244443941444536313030374536384542394442303a20696e73756666696369656e742066756e6473',
        value: '0ibc/CA6FBFAF399474A06263E10D0CE5AEBBE15189D6D4B2DD9ADE61007E68EB9DB0 is smaller than 104394ibc/CA6FBFAF399474A06263E10D0CE5AEBBE15189D6D4B2DD9ADE61007E68EB9DB0: insufficient funds',
      } as const
    ]
  },
  'Cosmos SDK Bank Keeper 2': {
    data: '0x313330336962632f4341364642464146333939343734413036323633453130443043453541454242453135313839443644344232444439414445363130303745363845423944423020697320736d616c6c6572207468616e20313536356962632f434136464246414633393934373441303632363345313044304345354145424245313531383944364434423244443941444536313030374536384542394442303a20696e73756666696369656e742066756e6473',
    results: [
      {
        type: 'text',
        data: '0x313330336962632f4341364642464146333939343734413036323633453130443043453541454242453135313839443644344232444439414445363130303745363845423944423020697320736d616c6c6572207468616e20313536356962632f434136464246414633393934373441303632363345313044304345354145424245313531383944364434423244443941444536313030374536384542394442303a20696e73756666696369656e742066756e6473',
        value: '1303ibc/CA6FBFAF399474A06263E10D0CE5AEBBE15189D6D4B2DD9ADE61007E68EB9DB0 is smaller than 1565ibc/CA6FBFAF399474A06263E10D0CE5AEBBE15189D6D4B2DD9ADE61007E68EB9DB0: insufficient funds',
      } as const
    ]
  },
};

const exceptionCases = {
  'not valid hex length': {
    data: '0x123',
    error: 'Invalid hex data length'
  },
  'not valid hex data': {
    data: 'wxyz',
    error: 'Invalid hex data'
  },
};

function makeAbi(name: string, ...types: AbiType[]): AbiError {
  return {
    type: 'error',
    name,
    inputs: types.map((type) => ({ type })),
  }
}

const decoder = new ErrorDecoder({
  path: './data',
  prefixLength: 2,
  maxFilesInCache: 5,
  maxSelectorsInCache: 1000,
});

describe('empty', async () => {
  test.each(Object.keys(emptyCases))('%p', async (key) => {
    const { data, results } = emptyCases[key as keyof typeof emptyCases]!;
    const result = await decoder.decode(data);
    expect(result).toEqual(results);
  });
});

describe('built ins', async () => {
  test.each(Object.keys(builtInCases))('%p', async (key) => {
    const { data, results } = builtInCases[key as keyof typeof builtInCases]!;
    const result = await decoder.decode(data);
    expect(result).toEqual(results);
  });
});

describe('text only', async () => {
  test.each(Object.keys(textCases))('%p', async (key) => {
    const { data, results } = textCases[key as keyof typeof textCases]!;
    const result = await decoder.decode(data);
    expect(result).toEqual(results);
  });
});

describe('no parameters', async () => {
  test.each(Object.keys(noParametersCases))('%p', async (key) => {
    const { data, results } = noParametersCases[key as keyof typeof noParametersCases]!;
    const result = await decoder.decode(data);
    expect(result).toEqual(results);
  });
});

describe('one parameters', async () => {
  test.each(Object.keys(oneParameterCases))('%p', async (key) => {
    const { data, results } = oneParameterCases[key as keyof typeof oneParameterCases]!;
    const result = await decoder.decode(data);
    expect(result).toEqual(results);
  });
});

describe('two parameters', async () => {
  test.each(Object.keys(twoParameterCases))('%p', async (key) => {
    const { data, results } = twoParameterCases[key as keyof typeof twoParameterCases]!;
    const result = await decoder.decode(data);
    expect(result).toEqual(results);
  });
});

describe('three parameters', async () => {
  test.each(Object.keys(threeParameterCases))('%p', async (key) => {
    const { data, results } = threeParameterCases[key as keyof typeof threeParameterCases]!;
    const result = await decoder.decode(data);
    expect(result).toEqual(results);
  });
});

describe('exceptions', async () => {
  test.each(Object.keys(exceptionCases))('%p', async (key) => {
    const { data, error } = exceptionCases[key as keyof typeof exceptionCases]!;
    expect(() => decoder.decode(data)).toThrowError(error);
  });
});
